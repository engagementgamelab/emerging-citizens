{{!< default}}
{{!-- 
/**
 * Emerging Citizens
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script includes partial for MODERATOR socket.io events
 * ==========
 */
--}}		

var clockInterval;
var startAnim = new TimelineLite({paused: true});

var socketEvents = function(eventId, eventData) {
    
    switch (eventId) {

        case 'connect':

			   // Connected, let's sign-up for to receive messages for this room
               $('#startGameForm').css('padding', '1%');
               
			   socket.emit('room', emitData('moderator'));

               {{#ifeq gameType "wikigeeks"}}
                    $('.body').addClass('wikigeeks');
               {{/ifeq}}
               
            break;

        case 'players:update':

            var staticPlayers = $('.player-static');
            var currentPlayers = _.pluck(eventData.players, 'username');

            // Allow to start?
            if(currentPlayers.length >= 2)
                startAnim.play();
            else
                startAnim.reverse();

            _.each(staticPlayers, function(player, index) {

                // TODO: Handle visual of players leaving mid-game
                // if(eventData.state === 'lost_player') {

                //     if(!currentPlayers[index]) {
                //         $(player).children('.icon').removeClass('active');
                //         $(player).children('.nameplate').removeClass('active');
                //     }

                // }
                // else {
                    
                    if(currentPlayers[index]) {

                        var name = currentPlayers[index];
                        var nameFormatted = (name.length <= 15) ? name : name.substring(0, 15) + "...";

                        // $(player).children('.icon').addClass('active');
                        $(player).children('.nameplate').text(nameFormatted);

                        if(eventData.state !== 'lost_player') {
                            $(player).children('.icon').addClass('active');
                            $(player).children('.nameplate').text(nameFormatted).addClass('active');
                        }

                    }
                    else {

                        $(player).children('.icon').removeClass('active');
                        $(player).children('.nameplate').removeClass('active');

                    }

                // }

            });

            break;

        case 'game:tutorial':
            
            $('#overlay').html(eventData).fadeIn();
            
            // Show countdown
            var secondsLeft = 8;
            var circle = new ProgressBar.Circle('#countdown', {
                color: '#fff',
                duration: 8000,
                easing: 'easeInOut',
                strokeWidth: 6,
                trailColor: '#f4f4f4',
                trailWidth: 0.8,
                fill: '#00c5c2',
                text: {
                    value: '8',
                    className: 'text',
                }
            });

            $('#countdown').click(function() {
                $('#overlay').fadeOut();
            });

            var tutorialCountdown = setInterval(function() {
                secondsLeft--;

                $('#countdown .text').text(secondsLeft);

                // End countdown and show arrow to continue
                if(secondsLeft == 0) {
                    clearInterval(tutorialCountdown);

                    var icon = $('#continue .icon').detach();
                    $('#countdown .text').empty();
                    icon.appendTo($('#countdown .text'));
                    
                    var continueAnim = new TimelineMax({ paused:true });
                    continueAnim
                    .from(icon, 1.5, {scale: 0, autoAlpha: 0, ease: Bounce.easeOut })
                    .from(icon, 1, {x: '+20', repeat: -1, yoyo: true, ease: Expo.easeOut });
                    // .to($('#countdown'), 1, {scale: 2, ease: Bounce.easeOut })
                    // .from($('#countdown'), 1, {scale: 2, ease: Bounce.easeOut, delay: 1 });

                    continueAnim.play();
                }
            }, 1000);

            circle.animate(1);

            break;

        case 'game:start':

            $('#gameContent').html(eventData.html);

           {{!--  {{#ifeq gameType "wikigeeks"}}
                $('.header').fadeIn();
            {{/ifeq}} --}}

            break;

        case 'game:ended':

            updateGameContent(eventData);

            break;
            
        case 'game:countdown':

            if(clockInterval)
                clearInterval(clockInterval);

            {{#ifeq gameType "htyi"}}

                    var secondsLeft = eventData.duration;
                    var timeFactor = 360 / secondsLeft;
                    var clockHand = $('#clock-hand');
                        
                    clockInterval = setInterval(function() {

                        function clockTick() {
                            clockHand.css({
                                transform:'rotateZ('+ -(timeFactor*secondsLeft) + 'deg)'
                            });
                            secondsLeft--;
                        }

                        clockTick();

                        if(secondsLeft === 0)
                            clearInterval(clockInterval);
                    }, 1000);

            {{/ifeq}}  

            break;

        {{#ifnoteq environment "production"}}
            case 'debug:pause':
                countdownPaused = !countdownPaused;

                break;
        {{/ifnoteq}}

        default:

            console.warn('No groupview handler found for event "' + eventId + '"');

            break;

    }
    
};

// Get events script for the game type logged in to
$.getScript( '/{{#ifnoteq environment "development"}}release{{else}}js{{/ifnoteq}}/events/group/{{gameType}}.js' )
    {{#ifnoteq environment "production"}}
        .done(function( script, textStatus ) {
            var startBtn = $('#btn-start-game');
            startAnim.from(startBtn, 1, {scale:0, autoAlpha:0, ease:Elastic.easeOut});
        })
        .fail(function( jqxhr, settings, exception ) {
            console.error('Unable to load %s (error: "%s")', '{{gameType}}.js', exception);
        });

    {{else}};
    {{/ifnoteq}}
