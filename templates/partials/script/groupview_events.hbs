{{!< default}}
{{!-- 
/**
 * Emerging Citizens
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script includes partial for MODERATOR socket.io events
 * ==========
 */
--}}			

var socketEvents = function(eventId, eventData) {
		
	var currentPlayers = [];
    var clockInterval;

    switch (eventId) {

        case 'connect':

			   // Connected, let's sign-up for to receive messages for this room
               $('#startGameForm').css('padding', '1%');
			   socket.emit('room', emitData('moderator'));
               
            break;

        case 'players:update':

                var staticPlayers = $('.player-static');
			  	currentPlayers = _.pluck(eventData, 'username');

                // Allow to start?
                if(currentPlayers.length === 2)
                {
                    var startAnim = new TimelineLite();
                    startAnim.from($('#btn-start-game'), 1, {scale:0, autoAlpha: 0, ease:Elastic.easeOut})
                }

    		    // $('#playersContent').html(currentPlayers.join('<p> joined. </p><br />'));

                _.each(currentPlayers, function(name, index) {

                    var nameFormatted = (name.length <= 15) ? name : name.substring(0, 15) + "...";

                    $(staticPlayers[index]).children('.icon').addClass('active');
                    $(staticPlayers[index]).children('.nameplate').addClass('active').text(nameFormatted);
                });

            break;

        case 'game:tutorial':
            
            $('#overlay').html(eventData).fadeIn();
            var secondsLeft = 8;
            var circle = new ProgressBar.Circle('#countdown', {
                color: '#fff',
                duration: 8000,
                easing: 'easeInOut',
                strokeWidth: 6,
                trailColor: '#f4f4f4',
                trailWidth: 0.8,
                fill: '#00CB86',
                text: {
                    value: '8',
                    className: 'text',
                }
            });

            $('#countdown').click(function() {
                $('#overlay').fadeOut();
            });

            var roundCountdown = setInterval(function() {
                secondsLeft--;

                $('#countdown .text').text(secondsLeft);

                if(secondsLeft == 0) {
                    clearInterval(roundCountdown);

                    var icon = $('#continue .icon').detach();
                    $('#countdown .text').empty();
                    icon.appendTo($('#countdown .text'));
                    
                    var continueAnim = new TimelineMax({ paused:true });
                    continueAnim
                    .from(icon, 1.5, {scale: 0, autoAlpha: 0, ease: Bounce.easeOut })
                    .from(icon, 1, {x: '+20', repeat: -1, yoyo: true, ease: Expo.easeOut });
                    // .to($('#countdown'), 1, {scale: 2, ease: Bounce.easeOut })
                    // .from($('#countdown'), 1, {scale: 2, ease: Bounce.easeOut, delay: 1 });

                    continueAnim.play();
                }
            }, 1000);

            circle.animate(1);

            break;

        case 'game:start':
            
            $('#gameContent').html(eventData);

            break;  
            
        case 'game:countdown':

                var secondsLeft = eventData;
                var timeFactor = 360 / secondsLeft;
                var clockHand = $('#clock-hand');

                if(clockInterval !== undefined)
                    clearInterval(clockInterval);
                    
                clockInterval = setInterval(function() {

                    function clockTick() {
                        clockHand.css({
                            transform:'rotateZ('+ -(timeFactor*secondsLeft) + 'deg)'
                        });
                        secondsLeft--;
                    }

                    clockTick();

                    if(secondsLeft === 0)
                        clearInterval(clockInterval);
                }, 1000);

            break;    

        case 'game:end':
        case 'hashtag:submitted':
        case 'hashtags:received':

            $('#gameContent').html(eventData);

            //instantiate a TimelineLite for hashtags received animation
            var hashtagsVoteAnim = new TimelineLite({ paused:true });
            $('#hashtag-submissions-prompt').show();
            hashtagsVoteAnim.from($('#hashtag-submissions-prompt'), 1, { y: -200, autoAlpha: 0, ease:Elastic.easeOut })
            .staggerFrom($('#hashtag-submissions .leftmost .hashtag'), 1, {xPercent:-100, autoAlpha:0, ease:Elastic.easeOut}, .5)
            .staggerFrom($('#hashtag-submissions .left .hashtag'), 1, {yPercent:100, autoAlpha:0, ease:Elastic.easeOut}, .5)
            .staggerFrom($('#hashtag-submissions .right .hashtag'), 1, {yPercent:100, autoAlpha:0, ease:Elastic.easeOut}, .5)
            .staggerFrom($('#hashtag-submissions .rightmost .hashtag'), 1, {xPercent:100, autoAlpha:0, ease:Elastic.easeOut, delay: .3}, .5);

            hashtagsVoteAnim.play();

            break;

        case 'hashtags:results':

            $('#gameContent').html(eventData);

            //instantiate a TimelineLite for hashtags animation
            var hashtagsAnim = new TimelineLite({ paused:true , onComplete:function() { showScores(); }});
            var scoreAnim = new TimelineLite({paused: true, onComplete:function() { nextRound(); }});

            var elements = $('#hashtag-results .result.fake');
            var realHashtag = $('#hashtag-results .result.real');

            var hashtagsAnimSlider;
            
            // 1) Show hashtags
            hashtagsAnim.from($('#hashtags'), 1.5, {top:-200, autoAlpha:0, ease:Bounce.easeOut});
            _.each(elements, function(el, index) {

                hashtagsAnim.from(el, 1, {y:-200, autoAlpha:0, ease:Bounce.easeOut})
                
                .from($(el).find('.creator'), 1, {autoAlpha:0, delay: 2}, 'creator')
                .staggerFrom($(el).find('.voter'), 3, {delay: 0, scale:0, opacity:1, ease:Elastic.easeOut, onStart: function() {

                    ion.sound.play("button_tiny");

                }}, 2)
                
                .staggerTo($(el).find('.voter .portrait'), 1.5, { scale: 0, autoAlpha:0, display: 'none', ease:Elastic.easeOut }, 1, 'votes')
                .staggerFromTo($(el).find('.voter .points'), 1, { scale: 0, opacity:0, ease:Elastic.easeOut }, { scale: 1, opacity: 1, display: 'block'}, 1, 'votes')

                .to(el, 1, {delay: 5, y:200, autoAlpha:0, display:'none'});

            });

            // 2) Real hashtag
            hashtagsAnim
            .from($(realHashtag), 1, {delay: 0.5, y:-200, autoAlpha:0, ease:Bounce.easeOut})
            .staggerFrom($(realHashtag).find('.voter'), 3, {delay: 0, scale:0, opacity:1, ease:Elastic.easeOut, onStart: function() {

                ion.sound.play("button_tiny");

            }}, 2)

            .staggerFrom($(realHashtag).find('.voter .score'), 1.5, { scale: 0, autoAlpha:0, ease:Elastic.easeOut, onStart: function() {

                ion.sound.play("pop_cork");

            }}, 1)
            .to($(realHashtag), 1, { y:0, ease:Elastic.easeOut }, 'real')
            .from($('#hashtag-results #prompt'), 1, { y: 100, scale: 0, autoAlpha: 0, ease: Elastic.easeOut }, 'real')
            .to($(realHashtag).find('.hashtag'), 1, { y: 0, autoAlpha: 1}, 'real')
            .to($('#hashtags'), 1, {delay: 5, y:-200, autoAlpha: 0, display:'none', ease:Elastic.easeIn});

            {{#ifeq debug true}}
                hashtagsAnimSlider = new GSAPTLSlider(hashtagsAnim, "slider-gsap", {
                    width: 600
                });
            {{/ifeq}}

            hashtagsAnim.play();

            function showScores() {

                $('#hashtags').remove();

                if(hashtagsAnimSlider !== undefined && hashtagsAnimSlider !== null)
                    hashtagsAnimSlider.clear();

                scoreAnim.from($('#scores'), 1.5, {autoAlpha:0, ease:Bounce.easeOut})
                .staggerFrom($('#scores .left .player'), 1, {xPercent:-100, force3D:true, autoAlpha:0, ease:Elastic.easeOut}, 1)
                .staggerFrom($('#scores .right .player'), 1, {xPercent:100, force3D:true, autoAlpha:0, ease:Elastic.easeOut, delay: .3}, 1, "players")
                .to($('#scores'), 1, {autoAlpha:0, display:'none'})

                if($('#winners-circle')[0] !== undefined) {

                    scoreAnim.from($('#winners-circle'), 1.5, {scale:0.5, autoAlpha:0, ease:Bounce.easeOut})
                    .staggerFrom($('.score-box'), 1.5, {xPercent:100, force3D:true, autoAlpha:0, ease:Elastic.easeOut}, 2)
                    .staggerTo($('.score-box'), 1, {xPercent:-100, force3D:true, autoAlpha:0, ease:Elastic.easeOut, delay: 5}, .3)
                    .to($('#winners-circle'), 1, {autoAlpha:0, display:'none'})

                }

                scoreAnim.from($('#leaderboard'), 1.5, {autoAlpha:0, ease:Bounce.easeOut})
                .staggerFrom($('#leaderboard .left .player'), 1, {xPercent:-100, force3D:true, autoAlpha:0, ease:Elastic.easeOut}, .5)
                .staggerFrom($('#leaderboard .right .player'), 1, {xPercent:100, force3D:true, autoAlpha:0, ease:Elastic.easeOut, delay: .3}, .5)

                {{#ifeq debug true}}
                    hashtagsAnimSlider = new GSAPTLSlider(scoreAnim, "slider-gsap", {
                        width: 600
                    });
                {{/ifeq}}

                scoreAnim.play();

            }

            function nextRound() {

                var secondsLeft = 10;
                var roundCountdown = setInterval(function() {
                    secondsLeft--;

                    $('#next-round').text('Next round in ' + secondsLeft + 's');

                    if(secondsLeft == 0) {
                        socket.emit('game:next_round', emitData(null));
                        clearInterval(roundCountdown);
                    }
               }, 1000);

            }

            break;

        default:

            console.error('No handler found for event "' + eventId + '"');

            break;

    }
    
};