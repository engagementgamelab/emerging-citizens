{{!< default}}
{{!-- 
/**
 * Emerging Citizens
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script includes partial for MODERATOR socket.io events
 * ==========
 */
--}}		

var clockInterval;

{{#ifnoteq environment "production"}}
    var countdownPaused = false;
{{/ifnoteq}}

var socketEvents = function(eventId, eventData) {
    
    switch (eventId) {

        case 'connect':

			   // Connected, let's sign-up for to receive messages for this room
               $('#startGameForm').css('padding', '1%');
               
			   socket.emit('room', emitData('moderator'));

               {{#ifeq gameType "wikigeeks"}}
                    $('.body').addClass('wikigeeks');

               {{/ifeq}}
               
            break;

        case 'players:update':

                var staticPlayers = $('.player-static');
                var currentPlayers = _.pluck(eventData, 'username');

                // Allow to start?
                if(currentPlayers.length === 2)
                {
                    var startAnim = new TimelineLite();
                    startAnim.from($('#btn-start-game'), 1, {scale:0, autoAlpha: 0, ease:Elastic.easeOut})
                }

                _.each(currentPlayers, function(name, index) {

                    var nameFormatted = (name.length <= 15) ? name : name.substring(0, 15) + "...";

                    $(staticPlayers[index]).children('.icon').addClass('active');
                    $(staticPlayers[index]).children('.nameplate').addClass('active').text(nameFormatted);

                });

            break;

        case 'game:tutorial':
            
            $('#overlay').html(eventData).fadeIn();
            
            // Show countdown
            var secondsLeft = 8;
            var circle = new ProgressBar.Circle('#countdown', {
                color: '#fff',
                duration: 8000,
                easing: 'easeInOut',
                strokeWidth: 6,
                trailColor: '#f4f4f4',
                trailWidth: 0.8,
                fill: '#00c5c2',
                text: {
                    value: '8',
                    className: 'text',
                }
            });

            $('#countdown').click(function() {
                $('#overlay').fadeOut();
            });

            var tutorialCountdown = setInterval(function() {
                secondsLeft--;

                $('#countdown .text').text(secondsLeft);

                // End countdown and show arrow to continue
                if(secondsLeft == 0) {
                    clearInterval(tutorialCountdown);

                    var icon = $('#continue .icon').detach();
                    $('#countdown .text').empty();
                    icon.appendTo($('#countdown .text'));
                    
                    var continueAnim = new TimelineMax({ paused:true });
                    continueAnim
                    .from(icon, 1.5, {scale: 0, autoAlpha: 0, ease: Bounce.easeOut })
                    .from(icon, 1, {x: '+20', repeat: -1, yoyo: true, ease: Expo.easeOut });
                    // .to($('#countdown'), 1, {scale: 2, ease: Bounce.easeOut })
                    // .from($('#countdown'), 1, {scale: 2, ease: Bounce.easeOut, delay: 1 });

                    continueAnim.play();
                }
            }, 1000);

            circle.animate(1);

            break;

        case 'game:start':

            $('#gameContent').html(eventData.html);

            break;
            
        case 'game:countdown':

            if(clockInterval)
                clearInterval(clockInterval);

            {{#ifeq gameType "htyi"}}

                    var secondsLeft = eventData.duration;
                    var timeFactor = 360 / secondsLeft;
                    var clockHand = $('#clock-hand');
                        
                    clockInterval = setInterval(function() {

                        function clockTick() {
                            clockHand.css({
                                transform:'rotateZ('+ -(timeFactor*secondsLeft) + 'deg)'
                            });
                            secondsLeft--;
                        }

                        clockTick();

                        if(secondsLeft === 0)
                            clearInterval(clockInterval);
                    }, 1000);

            {{/ifeq}}  

            {{#ifeq gameType "wikigeeks"}}

                    var countdownText =  $('#countdown #text');
                    var revealCountdownText = $('#reveal #countdown #text');

                    var secondsLeft = eventData.duration;
                    var clockName = eventData.name;

                    clockInterval = setInterval(function() {

                        {{#ifnoteq environment "production"}}
                            if(countdownPaused)
                                return;
                        {{/ifnoteq}}

                        secondsLeft--;
                        console.log (secondsLeft, "seconds left");

                        let displaySeconds = (secondsLeft < 10) ? '0'+secondsLeft : secondsLeft;

                        TweenLite.to(countdownText, .1, { scale: 0 });
                        
                        $(countdownText).text('0:' + displaySeconds);
                        $(revealCountdownText).text('0:' + displaySeconds);
                        
                        TweenLite.from(countdownText, .1, { scale: 0 });

                        // End countdown
                        if(secondsLeft == 0 && (clockName === 'articleReveal' || clockName === 'topicCountdown')) {
                            console.log ("countdown ended now");
                            $('#overlay #reveal').html(eventData).fadeOut();
                            $('#overlay').html(eventData).fadeOut();
                            clearInterval(clockInterval);
                        }
                        else if(secondsLeft == 4 && (clockName === 'articleReveal' || clockName === 'topicCountdown')) {
                            console.log ("reveal countdown HBS");
                            $('#overlay').html(eventData).fadeIn();
                            $('#overlay #reveal').html(eventData).fadeIn();
                            {{!-- clearInterval(clockInterval); --}}
                        } 
 
                    }, 1000);



            {{/ifeq}}

            break;

        case 'game:end':

        {{#ifeq gameType "htyi"}}
          
            case 'hashtag:submitted':
            case 'hashtags:received':

                $('#gameContent').html(eventData);
                
                currentHashtags = _.pluck(eventData, 'hashtag-submissions');

                //instantiate a TimelineLite for hashtags received animation
                var hashtagsVoteAnim = new TimelineLite({ paused:true });
                $('#hashtag-submissions-prompt').show();

                hashtagsVoteAnim.from($('#hashtag-submissions-prompt'), 1, { y: -200, autoAlpha: 0, ease:Elastic.easeOut })
                .staggerFrom($('#hashtag-submissions .leftmost .hashtag'), 1, {xPercent:-100, autoAlpha:0, ease:Elastic.easeOut}, .5)
                .staggerFrom($('#hashtag-submissions .left .hashtag'), 1, {yPercent:100, autoAlpha:0, ease:Elastic.easeOut}, .5)
                .staggerFrom($('#hashtag-submissions .right .hashtag'), 1, {yPercent:100, autoAlpha:0, ease:Elastic.easeOut}, .5)
                .staggerFrom($('#hashtag-submissions .rightmost .hashtag'), 1, {xPercent:100, autoAlpha:0, ease:Elastic.easeOut, delay: .3}, .5);

                hashtagsVoteAnim.play();

                break;

        {{/ifeq}}

        case 'hashtags:results':

            {{> script/htyi_results debug=debug}}
            
            break;

        {{#ifeq gameType "wikigeeks"}}
            case 'topic:info':
                        
                $('#gameContent').html(eventData);

                {{#ifeq gameType "wikigeeks"}}

                    $('#reveal').html(eventData.reveal);

                {{/ifeq}}

                $('#overlay').fadeOut().empty();

                break;

            case 'wiki:results':
                
                $('#gameContent').html(eventData);

                function roundCountdown() {

                    {{#ifnoteq environment "production"}}
                        if(countdownPaused)
                            return;
                    {{/ifnoteq}}
                    
                    var countdownText = $('#countdown #text');
                    var secondsLeft = 10;
                    var roundInterval = setInterval(function() {
                        
                        secondsLeft--;
                        $(countdownText).text(secondsLeft);

                        if(secondsLeft == 0)
                        {
                            clearInterval(roundInterval);
                            
                            // Return home if winners circle showing
                            if($('#winners-circle')[0])
                                location.href = '\\';
                            else 
                                socket.emit('game:next_round', emitData(null));
                        }
                
                    }, 1000);

                }

                var topPlayersAnim = new TimelineLite({paused: true, onComplete: function() { scoreAnimPlay(); } });
                var scoreAnim = new TimelineLite({paused: true, onComplete: function() { roundCountdown(); } });
                
                function scoreAnimPlay() {
                 
                    scoreAnim.from($('#results-header'), 1, {autoAlpha:0, delay: 4})

                    .from($('#results'), 1, {autoAlpha:0, scale: 0, ease:Bounce.easeOut0, delay: 4}).add('resultsShow')
                    .to($('#results'), 1, {autoAlpha:0, scale: 0, display: 'none', ease:Bounce.easeOut}, 'resultsShow+=5')
                    
                    .from($('#scoring'), 1, {autoAlpha:0, scale: 0, ease:Bounce.easeOut}, 'resultsShow+=6')
                    .to($('#scoring'), 1, {autoAlpha:0, scale: 0, display: 'none', ease:Bounce.easeOut}, 'resultsShow+=11')
                    
                    .from($('#leaderboard'), 1, {autoAlpha:0, scale: 0, ease:Bounce.easeOut}, 'resultsShow+=12')
                    .from($('#countdown'), 1, {autoAlpha:0, ease:Bounce.easeOut}, 'resultsShow+=13');

                    scoreAnim.play();

                }

                var topPlayers = $('#top-players .player-path');
                _.each(topPlayers, function(player, index) {

                    var articleTitles = $(player).find('.title');
                    var articleDots = $(player).find('.articleDot');

                    if(index > 0) {
                        topPlayersAnim.from($(player), 1, {autoAlpha:0, scale: 0, ease:Bounce.easeOut, delay: 1});
                    }
                    else {
                        topPlayersAnim.from($(player), 1, {autoAlpha:0, scale: 0, ease:Bounce.easeOut, delay: 1});
                    }

                    _.each(articleTitles, function(title, index) {
                        $(articleDots[index]).delay(500*index).velocity({r: 8}, 500, [50, 10]);
                        
                        topPlayersAnim.from($(title), .5, {autoAlpha:0, scale: 0, ease:Bounce.easeOut, delay: .5});
                    });

                    topPlayersAnim.to($(player), 1, {autoAlpha:0, scale: 0, display: 'none', ease:Bounce.easeOut, delay: (articleTitles.length/2)*(index+1)})

                });

                topPlayersAnim.play();

                break;
        {{/ifeq}}

        {{#ifnoteq environment "production"}}
            case 'debug:pause':
                countdownPaused = !countdownPaused;

                break;
        {{/ifnoteq}}

        default:

            console.error('No handler found for event "' + eventId + '"');

            break;

    }
    
};