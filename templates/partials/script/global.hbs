{{!< default}}
{{!-- 
/**
 * Emerging Citizens
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script include for global logic
 * ==========
 */
--}}

<script type="text/javascript">

	{{#ifeq environment "production"}}
		
		// GA include
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-64617433-4', 'auto');
	  ga('send', 'pageview');

	{{else}}

		// For socket debugging
		sessionStorage.debug = '*';

		// For countdown debugging
    var countdownPaused = false;

	{{/ifeq}}

	var gameContainer;
	var timeline = new TimelineLite();
	
	{{#ifeq section "index"}}

		$(document).ready(function() {

			if (jQuery.browser.mobile)
				return;

			$('.home-page-info.coming-soon').click(function(evt) {
				evt.preventDefault();
				$(evt.currentTarget).addClass('invalid');

				setTimeout(
					function() {
						$(evt.currentTarget).removeClass('invalid');
					}, 1000);
			});
 
		}); 
			
	{{/ifeq}}

  {{#ifeq section "comingsoon"}}

		$(document).ready(function() {

			$('.home-page-info.coming-soon').click(function(evt) {
				evt.preventDefault();
			});

			if (jQuery.browser.mobile)
				return;

			$('.coming-soon-info').css('visibility', 'hidden');
			
			timeline
			.from($('.navbar'), 1, {marginTop: "-20%", delay: 1.4, ease:Ease.easeOut})
			.fromTo($('#coming-soon-banner'), 1, {marginTop: "-40%"}, {marginTop: "8%", ease:Ease.easeOut})
			.staggerFrom($('.coming-soon-info'), 2, {yPercent:5, force3D:true, autoAlpha:0, ease:Elastic.easeOut}, .5);

			timeline.play();

		});

  {{else}}

		var socket;
	  var gameCode;
	  var playerId;
	  
	  var sfxPath = 'https://res.cloudinary.com/engagement-lab-home/video/upload/v1/emerging-citizens/sfx/';
	  {{#ifeq env "development"}}
	  	sfxPath = '/sfx/'
	  {{/ifeq}}

	  // All possible socket event IDs
	  // TODO: Change based on game type
		var eventIds = [

			{{#ifnoteq environment "production"}}
			'debug:pause',
			{{/ifnoteq}}

			'connect',
			'player:loggedin',
			'player:reconnected',
			'players:update',
			'player:finished',

			'game:tutorial',
			'game:start',
			'game:ending',
			'game:ended',
			'game:end',
			'game:resumed',
			'game:notfound',
			'game:countdown',
			'game:countdown_ending',
			'game:countdown_end',
			'game:round_over',
			
			'hashtag:tryagain',
			'hashtag:success',
			'hashtag:voted',

			'hashtags:received',
			'hashtags:results',
			'hashtags:reveal',
		
			'article:found',
			'article:random',
			'topic:info',
			'wiki:click',
			'wiki:results',
			'wiki:waiting',

			'meme:topic',
			'meme:create',
			'meme:received',
			'meme:voting',
			'meme:results',
			'meme:voted',
			'meme:liked'
		
		];

		/* 
		 Associate provided data object with current game ID
		*/
		var emitData = function(data) {

			if(gameCode === undefined && typeof(data.code) !== 'undefined')
				gameCode = data.code;

			return { gameId: gameCode, msgData: data };
		
		};

		/* 
		 Obtains the embedded data ('data-key="something"') object from the provided submit button
		*/
		var getFormData = function(submitElement) {

			var pkg;

			if(submitElement[0].dataset === undefined)
				return undefined;
			
			try {
				pkg = JSON.parse(submitElement[0].dataset.package);
			}
			catch(e) {
				pkg = submitElement[0].dataset.package;
			}

			if($.isPlainObject(pkg)) {
				$.each(Object.keys(pkg), function( key, value ) {

					if(pkg[value] !== undefined)
					  pkg[value] = $(pkg[value].toString()).val();

				});
			}
			else if(!submitElement.is('button'))
				pkg = $(pkg).val();

			return pkg;

		};

		/* 
			Util to convert seconds to h:mm:ss
		*/
		var secondsToHms = function(d) {

		  d = Number(d);
		  var h = Math.floor(d / 3600);
		  var m = Math.floor(d % 3600 / 60);
		  var s = Math.floor(d % 3600 % 60);

		  var hourDisplay = '<span id="h">' + (h > 0 ? h + ":" + (m < 10 ? "0" : "") : "") + '</span>';
		  var minsDisplay = '<span id="m">' + m + '</span>';
		  var secondsDisplay = '<span id="s">' + (s < 10 ? "0" : "") + s + '</span>';

		  return (hourDisplay + minsDisplay + ":" + secondsDisplay); 

		};

		var updateGameContent = function(content, callback) {

			$('#top-header').remove();

			gameContainer.html(content)
									 .promise()
									 .done(function(){
									 		
									 		if(callback)
										 		callback();

									 });

			if($('#top-header').length > 0) {
				var topBar = $('#top-header').detach();
				topBar.prependTo('body');
			}
		}

		/* 
			Util to shrink font size of element if text contents exceed given length threshold
		*/
		var shrinkToFill = function(input, threshold, startingSize) {

		    var txtInput = $(input),
		        txt = (txtInput.is('div')) ? txtInput.text() : txtInput.val(),
		        maxWidth = threshold,
		        defaultFontSize = startingSize,
		        hiddenId = txtInput.attr('id') + '-hidden';

		    $('#'+hiddenId).text(txt);
		    
        for (; startingSize >= 0; startingSize -=1) {
			        
		        // Set the style on the input
		        $('#'+hiddenId).css('fontSize', startingSize + 'pt');
		        txtInput.css('fontSize', startingSize + 'pt');

    		    if ($('#'+hiddenId).outerWidth() <= 340)
			        break;
        
        }
		    // if (txt.length > maxWidth) {

		    //     // Calculate a new font size (capped at 1.35em)
		    //     var fontSize = Math.min(Math.max( (defaultFontSize * maxWidth / txt.length * 1.5), 1.35 ), 3);
		        
		    //     // Set the style on the input
		    //     txtInput.css('fontSize', fontSize + 'em');

		    // }
		    // else
		    //     txtInput.css('fontSize', defaultFontSize + 'em');

		}

		{{#ifnoteq section 'group/monitor'}}

			// Load animations
			{{> script/player_animation}}

		{{/ifnoteq}}

		$(document).ready(function() {

			// Get reference to main content div
			gameContainer = $('#gameContent');

			// GROUP VIEW
			{{#ifeq section 'group'}}
				
	      $('.body').addClass('login');
				$('.navbar.main').hide();

				$('.voting-button').click(function(e) {

					$(e.currentTarget).toggleClass('inactive');
					$(e.currentTarget).toggleClass('active');

				});

				// Form click to begin game
				$('#btn_submit').click(function(evt) {
					var data = {};
					/*data.contentCategories = $(".form :input.active").map(function(){
																	    return $(this).val();
																	 }).get();*/
					data.accessCode = $('#access-code').text();

				  $.post( 
				  	"/api/create/" + $(evt.currentTarget).data().type,
						data,
						function( data ) {

							if(data.error_code !== undefined) {

								if(data.error_code === 'need_content')
									$('#session-create #categories').addClass('invalid');
								
								$('#session-create .error').text(data.msg).fadeIn();
								
								return;
							}

						  window.location = data;
						}
					);
				});

			 // PLAYER VIEW
			{{else}}

				{{> script/player_logic section=section}}

			{{/ifeq}}

			function templateLoad() {

				var selected = $('#template_selector').find('option:selected');
				var template = selected.val();
				var templateData = selected.data('key');
				var eventId = selected.data('event_id'); 

			  $.post( 
			  	"/api/load/",
			  	{ template_path: template, debug_key: templateData, event_id: eventId },
					function( data ) {

					 	socketEvents(data.id, data.eventData);

					 	if(typeof(gameEvents) == "function")
							gameEvents(data.id, data.eventData);

					}
				);

			}
			$("#template_reload").click(function() {

				templateLoad();

			});
			$("#template_selector").change(function() {

				templateLoad();
			
			});
			$("#countdowns_pause").click(function(evt) {

				var btn = $(evt.currentTarget);
				socket.emit('debug:pause', emitData());

				if(!$(btn).data('resume')) {
					$(btn).text('resume countdowns');
					$(btn).data('resume', 'true');
				}
				else {
					$(btn).text('pause countdowns');
					$(btn).data('resume', 'false');
				}

			});				
			$("#generate_players").click(function() {

				$("#generate_players").text('loading...');

				$('#login').remove();
				$('#emulate-players').fadeIn();
				
				$('#emulate-players iframe').attr('src', 'http://localhost:3000/play/debug');
			});

	});
	{{/ifeq}}	



</script>