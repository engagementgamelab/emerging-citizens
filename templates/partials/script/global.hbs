{{!< default}}
{{!-- 
/**
 * Emerging Citizens
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script include for global logic
 * ==========
 */
--}}

<script type="text/javascript">

	{{#ifeq environment "production"}}
		
		// GA include
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-64617433-4', 'auto');
	  ga('send', 'pageview');

	{{else}}

		// For socket debugging
		sessionStorage.debug = '*';

	{{/ifeq}}

	var timeline = new TimelineLite();

	// $(document).ready(function () {
	// 	// $('.markdown-span').each (function () {
	// 			console.log ("unwrapping");
	// 	// 		$('p').unwrap();
	// 	// 	});
	// 	$('.markdown-span p').contents().unwrap();
	// });
	

	{{#ifeq section "index"}}

		$(document).ready(function() {

			if (jQuery.browser.mobile)
				return;

			$('.home-page-info.coming-soon').click(function(evt) {
				evt.preventDefault();
				$(evt.currentTarget).addClass('invalid');

				setTimeout(
					function() {
						$(evt.currentTarget).removeClass('invalid');
					}, 1000);
			});


 
		}); 
			
	{{/ifeq}}

  {{#ifeq section "comingsoon"}}

		$(document).ready(function() {

			$('.home-page-info.coming-soon').click(function(evt) {
				evt.preventDefault();
			});

			if (jQuery.browser.mobile)
				return;

			$('.coming-soon-info').css('visibility', 'hidden');
			
			timeline
			.from($('.navbar'), 1, {marginTop: "-20%", delay: 1.4, ease:Ease.easeOut})
			.fromTo($('#coming-soon-banner'), 1, {marginTop: "-40%"}, {marginTop: "8%", ease:Ease.easeOut})
			.staggerFrom($('.coming-soon-info'), 2, {yPercent:5, force3D:true, autoAlpha:0, ease:Elastic.easeOut}, .5);

			timeline.play();

		});

  {{else}}

		var socket;
	  var gameCode;
	  var playerId;
	  
	  var sfxPath = 'https://res.cloudinary.com/engagement-lab-home/video/upload/v1/emerging-citizens/sfx/';
	  {{#ifeq env "development"}}
	  	sfxPath = '/sfx/'
	  {{/ifeq}}

		ion.sound({
	    sounds: [
	        {
	            name: "button_tiny"
	        }
	    ],
	    volume: 0.5,
	    path: sfxPath,
	    preload: true,
	    ready_callback: function(obj) { console.log('sounds ready', obj); }
		});

	  // All possible socket event IDs
	  // TODO: Change based on game type
		var eventIds = [

			'connect',
			'player:loggedin',
			'player:reconnected',
			'players:update',

			'game:tutorial',
			// 'game:login',
			'game:start',
			'game:ending',
			'game:ended',
			'game:end',
			'game:resumed',
			'game:notfound',
			'game:countdown',
			'game:countdown_ending',
			'game:countdown_end',
			'game:round_over',
			
			'hashtag:tryagain',
			'hashtag:success',

			'hashtags:received',
			'hashtags:results',
			'hashtags:reveal',
		
			'article:found',
			'topic:info',
			'topic:results'

		
		];

		/* 
		 Associate provided data object with current game ID
		*/
		function emitData(data) {

			if(gameCode === undefined && typeof(data.code) !== 'undefined')
				gameCode = data.code;

			return { gameId: gameCode, msgData: data };
		}

		/* 
		 Obtains the embedded data ('data-key="something"') object from the provided submit button
		*/
		function getFormData(submitElement) {

			var pkg;

			if(submitElement[0].dataset === undefined)
				return undefined;
			
			try {
				pkg = JSON.parse(submitElement[0].dataset.package);
			}
			catch(e) {
				pkg = submitElement[0].dataset.package;
			}

			if($.isPlainObject(pkg)) {
				$.each(Object.keys(pkg), function( key, value ) {

					if(pkg[value] !== undefined)
					  pkg[value] = $(pkg[value].toString()).val();

				});
			}
			else if(!submitElement.is('button'))
				pkg = $(pkg).val();

			return pkg;

		}

		{{#ifnoteq section 'group/monitor'}}

			// Load animations
			{{> script/player_animation}}

		{{/ifnoteq}}

		$(document).ready(function() {



			{{#ifeq section 'group'}}
				
	      $('.body').addClass('login');
				$('.navbar.main').hide();

				$('.voting-button').click(function(e) {

					$(e.currentTarget).toggleClass('inactive');
					$(e.currentTarget).toggleClass('active');

				});

				// Form click to begin game
				$('#btn_submit').click(function(evt) {
					var data = {};
					/*data.contentCategories = $(".form :input.active").map(function(){
																	    return $(this).val();
																	 }).get();*/
					data.accessCode = $('#access-code').text();

				  $.post( 
				  	"/api/create/" + $(evt.currentTarget).data().type,
						data,
						function( data ) {

							if(data.error_code !== undefined) {

								if(data.error_code === 'need_content')
									$('#session-create #categories').addClass('invalid');
								
								$('#session-create .error').text(data.msg).fadeIn();
								
								return;
							}

						  window.location = data;
						}
					);
				});

			{{else}}

					/*
						Logs the player in
					*/
					function playerLogin(data) {

						gameCode = data.code;

						// Save current game code to local storage
						sessionStorage.setItem('gameCode', gameCode);

						$('.navbar').slideUp();
						
						// Open socket connection
						if(socket === undefined) {
					    socket = io('//{{host}}');
					    registerEvents();
					  }

						playerName = $('#player_name').val();
						sessionStorage.setItem('username', playerName);

						socket.on('disconnect', function(){
						   // alert('disconnected!')
						});

						console.log('Connecting to game "' + gameCode + '".');

		        // Log player in
						socket.emit('login:submit', emitData({username: playerName, uid: data.uid}));

					}

					/*
						Checks if this client is logged in as a player already
					*/
					function checkIfLoggedIn() {
						
						// Check if game code saved to session (player is already logged in)
						if(!sessionStorage.getItem('gameCode'))
							return;

						gameCode = sessionStorage.getItem('gameCode');

						console.log('Trying to re-connect to game "' + gameCode + '".');
						
						// Open socket connection
						if(socket === undefined) {
					    socket = io('//{{host}}');
					    registerEvents();
					  }
            
            // Check if player is active in game
            socket.emit('login:active', {
						  gameId: sessionStorage.getItem('gameCode'), 
						  username: sessionStorage.getItem('username'),
						  uid: sessionStorage.getItem('uUID')
						});

					}

					/**
					 * Listen for forms that dispatch socket events.
					 *
					 * ### Examples:
					 *
					 * @class global
					 */
					$(document).on('click', '.form .submit', function() {
						
						var event = $(this).data().event;
						var localEvent = $(this).data().local_event;
						var sessionFlag = $(this).data().sessionFlag;
						var pkg = getFormData($(this));

						// If this is a local event, call immediately (don't emit)
						if(localEvent !== undefined) {
							socketEvents(localEvent);
							return;
						}

						// If there is a session flag ('flag:value'), set it
						if(sessionFlag !== undefined)
							sessionStorage.setItem(sessionFlag.split(':')[0], sessionFlag.split(':')[1]);

						socket.emit(event, emitData(pkg));

						if($(this).data().autohide) {
							$('#' + $('#submitted').data('hide')).remove();
							$('#submitted').show();
						}

					});

					/* 
					 Disallows input from octothorp (#) character for hashtag submission
					*/
					$(document).on('keypress', '#tweet_input', function(key) {
						
						if(key.charCode === 35)
							return false;

					});
					
					/* 
					 Logs player into game with room code and name
					*/
					$(document).on('click', '.btn.game_login', function() {

						var data = getFormData($(this));

						var playerUID = Math.floor(Math.pow(10, 10-1) + Math.random() * (Math.pow(10, 10) - Math.pow(10, 10-1) - 1));
            sessionStorage.setItem('uUID', playerUID);

					  $.post( 
					  	"/game",
					  	data,
							function( data ) {

								$('.form input').removeClass('invalid');

								if(data.error_code !== undefined) {

									switch(data.error_code) {
										case 'wrong_code': 
											$('.form #class_code').addClass('invalid');
											break;

										case 'no_username':
											$('.form #player_name').addClass('invalid');
											break;

										case 'username_taken':
											$('.form #player_name').addClass('invalid');
											break;
									}

									$('.form .error').text(data.msg).fadeIn();
									return;
	
								}

		            data.uid = playerUID;
								playerLogin(data);							

							}
						);

					});

					// Check if this client is logged in on server
					checkIfLoggedIn();
				
					{{!-- INDEX Template Script --}}
					{{#ifeq section 'group/monitor'}}
						
						// Open socket connection
				    socket = io();
				    registerEvents();
					
						gameCode = '{{game.accessCode}}-group'; 

						var nav = $('nav.header');

						// Thanks GOTA
						function doResize() {
						  
						  var scale = Math.min(
						    $(window).outerWidth() / 1680, 1.0
						  );
						  
						  $('body').css({
						    zoom: scale	
						  });

						}
						$(window).resize(function() {
							doResize();
						});
						doResize();

						{{#ifeq debug true}}
		        	// Debugging view
							$('#debugging').appendTo('.header');
		        {{/ifeq}}

						// Load events for group
						{{> script/groupview_events gameType=gameType}}
						
						$('.body').addClass('game-bg group');
						$('#wrapper').addClass('group');
						$('.navbar.main').attr ('style', 'display:none;');

            var openAnim = new TimelineLite();

            // Show players
            openAnim
            .from($('.room-container'), 1, {scale:0, delay: 1, ease:Elastic.easeOut})
            .staggerFrom($('.players.left .player-background'), 2, {xPercent:-200, force3D:true, autoAlpha:0, ease:Elastic.easeOut}, .1)
            .staggerFrom($('.players.right .player-background'), 2, {xPercent:200, force3D:true, autoAlpha:0, ease:Elastic.easeOut}, .1)

            openAnim.play();

					{{else}}

						// Prevent device sleep
						var noSleep = new NoSleep();
						noSleep.enable(5000);

						// Load events for players
						{{> script/player_events gameType=gameType}}

            {{#ifeq debug true}}
            	// Debugging view
	            {{#ifeq section 'play'}}
	                $('#access_code').val('TEST');
	                $('#player_name').val('Player_' + Math.floor(Math.random() * (10 - 1 + 1)) + 1);
	            {{/ifeq}}
            {{/ifeq}}
					
					{{/ifeq}}

					function registerEvents() {

						$.each(eventIds, function(index, id) {
						  
						  socket.on(id, function(eventData) {

								{{#ifnoteq environment "production"}}

									console.log("EVENT ID: ", id);
									console.log("EVENT DATA: (" + eventData + ")");

								{{/ifnoteq}}
								
								socketEvents(id, eventData);

							 	if(typeof(gameEvents) == "function")
									gameEvents(id, eventData);

							});

						});

					}

				{{#ifeq section 'index'}}

					playerEntry();

					$(document).on('click', '.btn.game_entry', function() {
						
						var type = $(this).data().game;

					  $.get( 
					  	"/game/get/" + type,
							function( data ) {

		            $('#gameContent').html(data);

		            $('.form input[type=submit]')
		            .hover(function(evt) {
		            
		            	timeline.to(evt.currentTarget, .5, { ease: Elastic.easeOut, scale:1.2 });
		            
		            })
		            .mouseleave(function(evt) {

		            	timeline.from(evt.currentTarget, .5, { scale:1.2 });
		            
		            });

							}
						);

					});

				{{/ifeq}}

				{{#ifeq section 'play'}}

	          $('.body').addClass('game-bg');
	          $('.body').addClass('player');

	      {{/ifeq}}

			{{/ifeq}}

			function templateLoad() {

				var selected = $('#template_selector').find('option:selected');
				var template = selected.val();
				var templateData = selected.data('key');
				var eventId = selected.data('event_id'); 

			  $.post( 
			  	"/game/load/",
			  	{ template_path: template, debug_key: templateData, event_id: eventId },
					function( data ) {

	          // $('#gameContent').html(data);
					 	socketEvents(data.id, data.eventData);

					}
				);

			}
			$("#template_reload").click(function() {

				templateLoad();

			});
			$("#template_selector").change(function() {

				templateLoad();
			
			});
			
	});
	{{/ifeq}}	



</script>