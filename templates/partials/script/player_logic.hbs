{{!< default}}
{{!-- 
/**
 * Emerging Citizens
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script includes partial for PLAYERS global client logic
 * ==========
 */
--}}

var isEmulated = window.frameElement && window.frameElement.getAttribute('data-emulated');

$(document).ready(function() {
    // Prevent device sleep
    var noSleep = new NoSleep();
    noSleep.enable();
});

{{#ifnoteq environment "development"}}
    {{!-- Smartlook integration --}}
    window.smartlook||(function(d) {
        var o=smartlook=function(){ o.api.push(arguments)},h=d.getElementsByTagName('head')[0];
        var c=d.createElement('script');o.api=new Array();c.async=true;c.type='text/javascript';
        c.charset='utf-8';c.src='//rec.getsmartlook.com/recorder.js';h.appendChild(c);
        })(document);
        smartlook('init', 'f70bc72265f75e886b23785202aafc01c9b5c2e1');

    // Warn about reloading
    window.addEventListener("onbeforeunload", function (e) {

      (e || window.event).returnValue = null;
      return null;

    });
{{/ifnoteq}}

// Do not enable sound for emulated (debug) player
if(!isEmulated) {

    ion.sound({
    sounds: [
        {
            name: "button_tiny"
        }
    ],
    volume: 0.5,
    path: sfxPath,
    preload: true
    });

}
else
    $('#debugging').remove();

/*
    Logs the player in
*/
var playerLogin = function(data) {

    gameCode = data.code;

    $('.navbar').slideUp();
    
    // Open socket connection
    if(!socket) {
        socket = io('//{{host}}', {'reconnection': true,'reconnectionDelay': 500,'maxReconnectionAttempts':Infinity});
        registerEvents();
    }

    playerName = $('#player_name').val();
    sessionStorage.setItem('username', playerName);

    // Log player in
    socket.emit('login:submit', emitData({username: playerName, uid: data.uid}));

}

/*
    Checks if this client is logged in as a player already
*/
var checkIfLoggedIn = function() {
    
    // Check if game code saved to session (player is already logged in)
    if(!sessionStorage.getItem('gameCode')) {
        $('.form').show();

        new TimelineLite()
        .to($('#logo_ec .row'), 1.5, {css:{'margin-top':'-12%'}, delay:1, ease:Expo.easeOut}, .1)
        .to($('#logo_ec .row'), 1.5, {scale:0.5, delay:1, ease:Expo.easeOut}, .1)

        .to($('#login'), 1.5, {css:{'margin-top':'-9%'}, delay:1.2, ease:Expo.easeOut}, .1)
        .from($('#access_code'), 1.5, {yPercent:-20, autoAlpha:0, delay:1.3, ease:Expo.easeOut}, .1)
        .from($('#player_name'), 1.5, {yPercent:-20, autoAlpha:0, delay:1.4, ease:Expo.easeOut}, .2)
        .from($('.entry-footer'), 1.5, {yPercent:100, autoAlpha:0, delay:1.5, ease:Expo.easeOut}, .4)
        .from($('#btn_submit_code, #btn_help'), 1.5, {yPercent:20, autoAlpha:0, delay:1.5, ease:Expo.easeOut}, .4);

        return;
    }

    $('#resuming').show();

    gameCode = sessionStorage.getItem('gameCode');
    
    // Open socket connection
    if(!socket) {
        socket = io('//{{host}}', {'reconnection': true,'reconnectionDelay': 500,'maxReconnectionAttempts':Infinity});
        registerEvents();
    }

    // Check if player is active in game
    socket.emit('login:active', {
      gameId: sessionStorage.getItem('gameCode'), 
      username: sessionStorage.getItem('username'),
      uid: sessionStorage.getItem('uUID')
    });

}

/**
 * Listen for forms that dispatch socket events.
 *
 * ### Examples:
 *
 * @class global
 */
$(document).on('click', '.form .submit', function(evt) {
    
    var event = $(this).data().event;
    var pkg = getFormData($(this));

    // Emit event to socket
    socket.emit(event, emitData(pkg));

    // If autohide defined for this form, remove the element defined by 'data-hide' on the '#submitted' dom
    if($(this).data().autohide) {
        new TimelineLite()
        .to('#' + $('#submitted').data('hide'), .5, {scale:0, autoAlpha:0, display:'none'})
        .from($('#submitted'), .5, {scale:0, autoAlpha:0});
    }

    // Disable form button unless explicitly prevented, and show loading...
    if(!$(this).data().keep_enabled) {
        $(evt.currentTarget).attr('disabled', 'disabled');
        loadToggle(true);
    }

});

/* 
 Logs player into game with room code and name
*/
$(document).on('click', '.btn.game_login', function(evt) {

    var data = getFormData($(this));
    var errorBox = $('.form .error');

    // Hide errors during typing
    $('.form input').keyup(function() {
        $('.form input').removeClass('invalid');
    });

    // Player entered code?
    if(!data.code || data.code.length === 0) {
        $('.form #access_code').addClass('invalid');
        errorBox.text('You need to enter a room code!').fadeIn(); 

        return;
    }
    // Player entered name?
    else if(!data.name || data.name.length === 0) {
        $('.form #player_name').addClass('invalid');
        errorBox.text('You need to enter a name!').fadeIn(); 

        return;
    }

    // Create uid for player
    var playerUID = Math.floor(Math.pow(10, 10-1) + Math.random() * (Math.pow(10, 10) - Math.pow(10, 10-1) - 1));
    sessionStorage.setItem('uUID', playerUID);

    // Disable button and show loading modal
    $(evt.currentTarget).attr('disabled', 'disabled');
    $('#loading-modal').fadeIn(250);

    $.post(
        "/game",
        data,
        function( data ) {

            $('.form input').removeClass('invalid');

            if(data.error_code) {

                switch(data.error_code) {

                    case 'game_not_found': 
                        $('.form #access_code').addClass('invalid');
                        
                        // Session does not exist, make sure to clear data from storage
                        sessionStorage.removeItem('gameCode');
                        sessionStorage.removeItem('playerSubmission');
                        break;

                    case 'no_username':
                    case 'username_taken':
                        $('.form #player_name').addClass('invalid');
                        break;

                    case 'game_active': 
                        $('.form #access_code').addClass('invalid');
                        break;

                }
    
                $('.btn.game_login').removeAttr('disabled');
                errorBox.text(data.msg).fadeIn();
                loadToggle(false, true);

                return;

            }

            data.uid = playerUID;
            playerLogin(data);                          

        }
    );

});

// Check if this client is logged in on server
checkIfLoggedIn();

{{!-- INDEX Template Script --}}
{{#ifeq section 'group/monitor'}}

    // Show or hide error about various game error states
    var showErrorModal = function(show, textType) {

        var showing = !$('#gameContent').is(':visible');

        // Exit?
        if( show && showing ||
            !show && !showing )
            return;

        // Fade game content in or out
        $('#gameContent').fadeTo("fast", (show ? 0 : 1), function() {

            // Hide/show game content
            $(this).css('display', (show ? 'none' : 'block'));

            if(show) {
                // Reset zoom
                $('body').css('zoom', 1);
            }

            $('#error-modal').fadeTo("fast", (show ? 1 : 0), function() {
                
                $('#error-modal #text h2').hide();

                // Show correct msg
                $('#error-modal #text #' + textType).show();
                $('#error-modal #text').css('top', (show ? 0 : '-100%'));
                
                // Hide/show error    
                $(this).css('display', (show ? 'block' : 'none'));

            });

        });

    };

    // Open socket connection
    socket = io();
    registerEvents();

    gameCode = '{{game.accessCode}}-group'; 

    // Thanks GOTA
    function doResize() {
        
        if (jQuery.browser.mobile)
            return;
      
        var scale = Math.min(
            $(window).outerWidth() / 1680, 1.0
        );

        // If screen too small, show error saying so
        if($(window).outerWidth() < 1024)
            showErrorModal(true, 'size');
        else {
            showErrorModal(false, 'size');
            // Apply zoom
            $('body').css('zoom', scale);
        }


    }
    // Scale screen as window is resized
    $(window).resize(function() {
         doResize();
    });
    doResize();

    {{#ifeq debug true}}
        // Debugging view
        $('#debugging').appendTo('body');
    {{/ifeq}}

    // Load events for group
    {{> script/groupview_events gameType=gameType}}

{{else}}

    // Load events for players
    {{> script/player_events gameType=gameType}}

    {{#ifeq debug true}}
        // Debugging view
        {{#ifeq section 'play'}}
            $('#access_code').val('TEST');
            $('#player_name').val('Player_' + Math.floor(Math.random() * (10 - 1 + 1)) + 1);
        {{/ifeq}}
    {{/ifeq}}

{{/ifeq}}

function registerEvents() {

    {{#ifeq environment "development"}}
        
        socket.on('connect_timeout', function() {
           console.warn('Client timed out when connecting.');
           {{!-- debugger; --}}
        });
        socket.on('disconnect', function() {
           console.warn('Client was disconnected!');
           {{!-- debugger; --}}
        });
        socket.on('reconnecting', function() {
           console.log('Reconnecting.');
           {{!-- debugger; --}}
        });
        socket.on('reconnect_attempt', function() {
           console.log('Trying to reconnect!');
           {{!-- debugger; --}}
        });
        socket.on('reconnect_error', function(err) {
           console.error('Reconnect error: %s', err);
           {{!-- debugger; --}}
        });

        console.log('Connecting to game "' + gameCode + '".');

    {{/ifeq}}

    $.each(eventIds, function(index, id) {
      
      socket.on(id, function(eventData) {

            {{#ifnoteq environment "production"}}

                $('#last-event').text('last event: ' + id);

                console.log("EVENT ID: ", id);

            {{/ifnoteq}}
            
            socketEvents(id, eventData);

            if(typeof(gameEvents) == "function")
                gameEvents(id, eventData);

        });

    });

}


{{#ifeq section 'index'}}

    playerEntry();

    $(document).on('click', '.btn.game_entry', function() {
        
        var type = $(this).data().game;

        $.get( 
            "/game/get/" + type,
            function( data ) {

                $('#gameContent').html(data);

                $('.form input[type=submit]')
                .hover(function(evt) {

                    timeline.to(evt.currentTarget, .5, { ease: Elastic.easeOut, scale:1.2 });

                })
                .mouseleave(function(evt) {

                    timeline.from(evt.currentTarget, .5, { scale:1.2 });

                });

            });
                
    });

{{/ifeq}}

// /play URL
{{#ifeq section 'play'}}

  $('.body').addClass('game-bg');
  $('.body').addClass('player');

{{/ifeq}}