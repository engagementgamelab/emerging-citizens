{{!< default}}
{{!-- 
/**
 * Emerging Citizens
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script includes partial for PLAYERS socket.io events
 * ==========
 */
--}}

var cachedEventId;
var cachedEventData;
var gameEnded = false;

var resetSession = function() {

    // Remove saved game code, submission, and set to not reconnected
    sessionStorage.removeItem('gameCode');
    sessionStorage.removeItem('playerSubmission');
    sessionStorage.setItem('reconnected', false);

}

var getScript = function(gameType) {

    $.getScript( '/{{#ifnoteq environment "development"}}release{{else}}js{{/ifnoteq}}/events/' + gameType + '.js' )
        .done(function( script, textStatus ) {
            // If any event is waiting to be called, do it now
            if(cachedEventId) {                
                socketEvents(cachedEventId, cachedEventData);
                gameEvents(cachedEventId, cachedEventData);
            }
          })
          .fail(function( jqxhr, settings, exception ) {
            console.error('Unable to load %s (error: "%s")', gameType + '.js', exception);
        });

}

$("#player_name").keydown(function(event) {
    
    if(event.keyCode == 13)
        $('#btn_submit_code').click();

});

var socketEvents = function(eventId, eventData) {

    // Wait for load defined if player is reconnected, so client can load needed logic before event is called
    if(eventData && eventData.waitForLoad)
    {
        cachedEventId = eventId;
        cachedEventData = eventData.html;

        return;
    }

    switch (eventId) {

        case 'connect':

            // Connected, let's sign-up for to receive messages for this room
            socket.emit('room', emitData('player'));
            
            break;

        case 'disconnect':

            console.log('--- Server disconnect: %s ---', eventData);

            if(gameEnded)
                return;

            // Remove saved sesh
            resetSession();

            $('#error-disconnected').fadeIn(function() {
                $('#error-disconnected #text').css('top', '0');
            });

            document.title = 'Emerging Citizens';

            break;

        case 'player:loggedin':

            updateGameContent(eventData.html);

            sessionStorage.setItem('gameType', eventData.gameType);
            sessionStorage.setItem('reconnected', false);

            getScript(sessionStorage.gameType);

            $('#waiting .game-message span').text('waiting for game to begin...');

            $('#debug-info').text('Player id: ' + eventData.id);

            playerId = eventData.id;

            document.title = 'EC: ' + playerName;

            break;

        case 'player:reconnected':
            
            // Get events script for the game type logged in to
            getScript(sessionStorage.gameType);

            // Set local player state as reconnected
            sessionStorage.setItem('reconnected', true);
            
            break;

        case 'game:start':

            // Save current game code to local storage
            sessionStorage.setItem('gameCode', gameCode);

            updateGameContent(eventData);

            // Change background
            $('.body').addClass('player');

            break;

        case 'game:ending':

            $('#error-box').text(eventData);
            $('#error-box').show();

            break;

        case 'game:ended':

            gameEnded = true;

            // Remove saved sesh
            resetSession();

            updateGameContent(eventData);
                
            // Send player back to login after 5s
            setTimeout(function() {
                window.location = window.location;
            }, 5000);

            document.title = 'Game ended!';

            break;

        case 'game:resumed':

            $('#error-box').hide();

            break;

        case 'game:notfound':

            // $('#error-box').text('game not found!');
            // $('#error-box').show();

            // Game not found, make sure form is visible
            $('#resuming').hide();
            $('.form').show();

            // If player was in a game (has code), tell them they were disconnected/game ended
            // Otherwise player is at login, tell them game ended
            if(sessionStorage.getItem('gameCode')) {
                updateGameContent(eventData);
                
                // Send player back to login after 5s
                setTimeout(function() {
                    window.location = '/play';
                }, 5000);
            }
            else
                $('.form .error').text('Game has ended, please try again.').fadeIn();

                
            // Reset saved sesh
            resetSession();


            break;

        case 'game:countdown_ending':

            $('.form .error').fadeIn().html(eventData);

            break;

        case 'game:round_over':

            if(eventData.html)
                updateGameContent(eventData.html);
            else
                updateGameContent(eventData);

            var nextRoundAnim = new TimelineLite({ paused:true , onComplete:function() {}});
            nextRoundAnim.from($('#nextRound'), 2.5, { scale: 0, opacity:0, ease:Elastic.easeOut }, { scale: 1, opacity: 1, display: 'block'});
            nextRoundAnim.play();

            if (eventData.data && eventData.data.last_round)
                resetSession();
            else
                sessionStorage.removeItem('playerSubmission');

            break;

        case 'game:end':
        case 'players:update':

            updateGameContent(eventData.html);

            break;

        default:

            console.warn('No handler found for event "' + eventId + '" in socketEvents.');

            break;

    }

};