{{!< default}}
{{!-- 
/**
 * Emerging Citizens
 * Developed by Engagement Lab, 2016
 * ==============
 * 
 * Script includes partial for MODERATOR socket.io events
 * ==========
 */
--}}			

var socketEvents = function(eventId, eventData) {
		
	var currentPlayers = [];

    switch (eventId) {

        case 'connect':

			   // Connected, let's sign-up for to receive messages for this room
			   socket.emit('room', emitData('moderator'));
               
            break;

        case 'players:update':

                var staticPlayers = $('.player-static');
			  	currentPlayers = _.pluck(eventData, 'username');

                // Allow to start?
                if(currentPlayers.length > 0)
                {
                    var startAnim = new TimelineLite();
                    startAnim.from($('#btn-start-game'), 1, {scale:0, autoAlpha: 0, ease:Elastic.easeOut})
                }

    		    // $('#playersContent').html(currentPlayers.join('<p> joined. </p><br />'));

                _.each(currentPlayers, function(name, index) {

                    var nameFormatted = (name.length <= 15) ? name : name.substring(0, 15) + "...";

                    $(staticPlayers[index]).children('.icon').addClass('active');
                    $(staticPlayers[index]).children('.nameplate').addClass('active').text(nameFormatted);
                });

            break;
            
        case 'game:countdown':

                var secondsLeft = eventData;
                var timeFactor = 360 / secondsLeft;
                var clockHand = $('#clock-hand');

                var clockInterval = setInterval(function() {

                    function clockTick() {
                        clockHand.css({
                            transform:'rotateZ('+ -(timeFactor*secondsLeft) + 'deg)'
                        });
                        secondsLeft--;
                    }

                    clockTick();

                    if(secondsLeft === 0)
                        clearInterval(clockInterval);
                }, 1000);

            break;


        case 'game:start':
            
            var openAnim = new TimelineLite();

            openAnim
            .from($('.room-container'), 1, {scale:0, delay: 1, ease:Elastic.easeOut})
            .staggerFrom($('.players.left .player-background'), 2, {xPercent:-200, force3D:true, autoAlpha:0, ease:Elastic.easeOut}, .1)
            .staggerFrom($('.players.right .player-background'), 2, {xPercent:200, force3D:true, autoAlpha:0, ease:Elastic.easeOut}, .1)

            openAnim.play();            

        case 'game:end':
        case 'hashtag:submitted':
        case 'hashtags:received':

            $('#gameContent').html(eventData);

            break;

        case 'hashtags:reveal':

            $('#gameContent').html(eventData);

            //instantiate a TimelineLite for hashtags animation
            var hashtagsAnim = new TimelineLite({ paused:true, onComplete:function() { showReal(); }});
            var realHashtagAnim = new TimelineLite({ paused:true, onComplete:function() { showScore(); }});
            var scoreAnim = new TimelineLite({paused: true, onComplete:function() { nextRound(); }});

            var elements = $('#hashtag-results .result.fake');
            
            // 1) Show hashtags
            hashtagsAnim.from($('#hashtags'), 1.5, {top:-200, autoAlpha:0, ease:Bounce.easeOut});
            
            _.each(elements, function(el, index) {

                hashtagsAnim.from(el, 1, {y:-200, autoAlpha:0, ease:Bounce.easeOut})
                .staggerFrom($(el).find('.voter'), 3, {scale:0, opacity:0, ease:Elastic.easeOut, onStart: function() {

                        ion.sound.play("button_tiny");

                }}, 2)
                .to(el, 1, {delay: 5, y:200, autoAlpha:0, display:'none'});

            });
            hashtagsAnim.play();

            function showReal() {

                realHashtagAnim
                .from($('#hashtag-submissions-prompt'), 1, {y:-45, autoAlpha:0})
                .from($('#hashtag-results .result.real'), 1, {delay: 0.5, y:-200, autoAlpha:0, ease:Bounce.easeOut})
                .to($('#hashtags'), 1, {delay: 5, y:-200, autoAlpha:0, display:'none', ease:Elastic.easeIn});

                realHashtagAnim.play();

            }

            function showScore() {

                scoreAnim
                .from($('#scores'), 1.5, {scale:0.5, autoAlpha:0, ease:Bounce.easeOut})
                
                .staggerFrom($('.score-box'), 1.5, {xPercent:100, force3D:true, autoAlpha:0, ease:Elastic.easeOut}, 2)
                .staggerTo($('.score-box'), 1.5, {xPercent:-100, force3D:true, autoAlpha:0, ease:Elastic.easeOut, delay: 5}, 2)
                
                .to($('#scores h1'), 1, {autoAlpha:0, display:'none'})
                .to($('#scores'), .1, {display:'none'})
                .from($('#leaderboard'), 1.5, {autoAlpha:0, ease:Bounce.easeOut})

                .staggerFrom($('#leaderboard .left .player'), 1, {xPercent:-100, force3D:true, autoAlpha:0, ease:Elastic.easeOut}, .5)
                .staggerFrom($('#leaderboard .right .player'), 1, {xPercent:100, force3D:true, autoAlpha:0, ease:Elastic.easeOut, delay: .3}, .5);

                scoreAnim.play();

            }

            function nextRound() {

                var secondsLeft = 10;
                var roundCountdown = setInterval(function() {
                    secondsLeft--;

                    $('#next-round').text('Next round in ' + secondsLeft + 's');

                    if(secondsLeft == 0) {
                        socket.emit('game:next_round', emitData(null));
                        clearInterval(roundCountdown);
                    }
               }, 1000);

            }

            break;

    }
    
};